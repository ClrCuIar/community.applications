Menu="Apps"
Icon="CA.png"
Title="Community Applications"
---
<?
###############################################################
#                                                             #
# Community Applications copyright 2015-2018, Andrew Zawadzki #
#                                                             #
###############################################################

$plugin = "community.applications";

require_once("/usr/local/emhttp/plugins/$plugin/include/paths.php");
require_once("/usr/local/emhttp/plugins/$plugin/include/caCredits.php");
require_once("/usr/local/emhttp/plugins/$plugin/include/helpers.php");

$mobileDevice = isMobile();

$installedVersion = exec("/usr/local/emhttp/plugins/dynamix.plugin.manager/scripts/plugin version /var/log/plugins/$plugin.plg");
$upgradeVersion = (is_file("/tmp/plugins/$plugin.plg")) ? exec("/usr/local/emhttp/plugins/dynamix.plugin.manager/scripts/plugin version /tmp/plugins/$plugin.plg") : "0";
if ( $installedVersion < $upgradeVersion ) {
	$upgradeAvailable = "true";
}
$cfg = parse_plugin_cfg($plugin);

if ( ! is_file($communityPaths['warningAccepted']) ) {
	$firstRun = "true";
}

$skinPath = "/usr/local/emhttp/plugins/community.applications/skins/{$cfg['skin']}";
$communityPaths['defaultSkin'] = "$skinPath/skin.json";

$timeNew = str_replace("-","",$cfg['timeNew']);

$template = readJsonFile($communityPaths['defaultSkin']);

?>
<?if ( is_file("$skinPath/default.css") ):?>
<link href="<?=autov("/plugins/community.applications/skins/{$cfg['skin']}/default.css")?>" type='text/css' rel='stylesheet'>
<?endif;?>
<?if ( is_file("$skinPath/{$display['theme']}.css") ):?>
<link href="<?=autov("/plugins/community.applications/skins/{$cfg['skin']}/{$display['theme']}.css")?>" type='text/css' rel="stylesheet">
<?endif;?>
<link rel='stylesheet' href='/plugins/community.applications/styles/awesomplete.css'>

<script src='/plugins/community.applications/javascript/awesomplete.min.js'></script>
<script src='/plugins/community.applications/javascript/jquery.mobile.custom.min.js'></script>
<script>
var URL = "/plugins/<?=$plugin?>/include/exec.php";
var last = $('input[name$="tabs"]').length;
var searchBoxInput;
var searchBoxAwesomplete;

var categorySub = {
	backup:"backup:",
	cloud:"cloud:",
	downloaders:"downloaders:",
	HomeAutomation:"HomeAutomation:",
	networkALL:"network:",
	mediaappALL:"MediaApp:",
	mediaserverALL:"MediaServer:",
	productivity:"productivity:",
	toolsALL:"tools:",
	other:"other:",
	Plugins:"Plugins:",
	networkweb:"Network:web",
	networkdns:"Network:DNS",
	networkftp:"Network:FTP",
	networkproxy:"network:proxy",
	networkvoip:"Network:VOIP",
	networkmanagement:"Network:Management",
	networkmessenger:"Network:Messenger",
	networkother:"Network:Other",
	MediaServerVideo:"MediaServer:Video",
	MediaServerMusic:"MediaServer:Music",
	MediaServerBooks:"MediaServer:Books",
	MediaServerPhotos:"MediaServer:Photos",
	MediaServerOther:"MediaServer:Other",
	MediaAppVideo:"MediaApp:Video",
	MediaAppMusic:"MediaApp:Music",
	MediaAppBooks:"MediaApp:Books",
	MediaAppPhotos:"MediaApp:Photos",
	MediaAppOther:"MediaApp:Other",
	tools:"Tools:",
	toolssystem:"Tools:System",
	NONE:"NONE",
	New:"New",
	UNCATEGORIZED:"UNCATEGORIZED",
	All:"All",
	PRIVATE:"PRIVATE",
	DEPRECATED:"DEPRECATED",
	BLACKLIST:"BLACKLIST",
	NOSUPPORT:"NOSUPPORT",
	INCOMPATIBLE:"INCOMPATIBLE"
	};

var categoryDesc = {
	mediaappALL:"All Media Applications",
	mediaserverALL:"All Media Servers",
	networkALL:"All Network Services",
	toolsALL:"All Tools / Utilities",
	networkweb:"Network Services: Web Servers",
	networkdns:"Network Services: DNS Clients / Servers",
	networkftp:"Network Services: FTP Clients / Servers",
	networkproxy:"Network Services: Proxies",
	networkvoip:"Network Services: Voice Over IP",
	networkmanagement:"Network Services: Management / Analyzers",
	networkmessenger:"Network Services: Messengers",
	networkother:"Network Services: Other",
	MediaServerVideo:"Media Servers: Video",
	MediaServerMusic:"Media Servers: Music",
	MediaServerBooks:"Media Servers: Books",
	MediaServerPhotos:"Media Servers: Photos",
	MediaServerOther:"Media Servers: Other",
	MediaAppVideo:"Media Applications: Video",
	MediaAppMusic:"Media Applications: Music",
	MediaAppBooks:"Media Applications: Books",
	MediaAppPhotos:"Media Applications: Photos",
	MediaAppOther:"Media Applications: Other",
	toolssystem:"Tools: System",
	NONE:"None Selected",
	New:"New / Updated Applications (within the last <?=$timeNew?>)",
	UNCATEGORIZED: "All Uncategorized Applications",
	All: "All Available Applications",
	PRIVATE:"All private applications",
	DEPRECATED:"All Deprecated Applications",
	BLACKLIST:"All Blacklisted Applications",
	NOSUPPORT:"All Applications with no support thread",
	INCOMPATIBLE: "All Incompatible Applications"
	};

var data = new Object();
data.oldWindowWidth = getWindowWidth();
data.docker = "";
data.section = "AppStore";
data.selected_category = "";
data.subcategory = "";
data.selected_subcategory = "";
data.selected = "";
data.lastUpdated = 0;
data.nextpage = 0;
data.prevpage = 0;
data.currentpage = 1;
var dockerSearchFlag = false;

$(function(){
	$('div[id=title]').last().append("<span id='searchFilter' class='status' style='margin-top:-10px;'><input type='text' id='searchBox'  placeholder='Search' autofocus><button class='searchSubmit' style='margin-right:10px' onclick='doSearch(true)'><i id='searchButton' class='fa fa-search fa-lg'></i></button>");

	searchBoxInput = document.getElementById("searchBox");
	searchBoxAwesomplete = new Awesomplete(searchBoxInput);

	if ( ! cookiesEnabled() ) {
		$("#cookieWarning").show();
	}	
	var maxPerPage = $.cookie("maxPerPage");
	if ( parseInt(maxPerPage,10) > 50 ) {
		maxPerPage = 50;
	}
	if ( ! maxPerPage ) {
		maxPerPage = "25";
	}

	$("#maxPerPage").val(maxPerPage);
	if ( isTouch() ) {
		$("#CommunityApplicationsBody").on("swipeleft",swipelefthandler);
		function swipelefthandler(event) {
			if ( data.nextpage > 1 ) {
				if ( dockerSearchFlag ) {
					dockerSearch(data.nextpage);
				} else {
					changePage(data.nextpage);
				}
			}
		}
		$("#CommunityApplicationsBody").on("swiperight",swiperighthandler);
		function swiperighthandler(event) {
			if ( data.prevpage > 0 ) {
				if ( dockerSearchFlag ) {
					dockerSearch(data.prevpage);
				} else {
					changePage(data.prevpage);
				}
			}
		}
	}
	
	$('#searchBox').keyup(function(e) {
		if (e.which == 13) {
			doSearch(false);
		}
	});

	$('.ca_staticTips').tooltipster({
		animationDuration: [2000,350],
		timer:15000,
		animation:'fade',
		arrow:true,
		trigger:'custom',
		triggerOpen:{mouseenter: true},
		triggerClose:{click:true,scroll:true,mouseleave:true}
	});
	
	$('.ca_toolsView').tooltipster({
		trigger: 'custom',
		triggerOpen: {click:true,touchstart:true},
		contentAsHTML: true,
		animation: 'none',
		arrow: true,
		distance: -15,
		delay: [1000, 2000],
		triggerClose:{click:true,scroll:true,mouseleave:true,delay:1000},
		interactive: true,
		viewportAware: true,
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);

			if ( ! isIconEnabled(origin) ) {
				var displayContent = null;
			} else {
				setSortOrder();
				var displayContent = $("#tooltipviews").html();
				$("#tooltipviews").attr("data-backup",displayContent);
				$("#tooltipviews").html(""); // The need for backup stems from the fact that we want user to be able to change view modes without having to disable the tooltipster popup.  A race condition can stem without the backup
			}
			instance.content(displayContent);
		},
		functionReady: function(instance,helper) {
			$(".sortButton,.dirButton").click(function() { changeSortOrder(this.id,$(this).attr("class")); });
		},
		functionAfter: function(instance,helper) {
			$("#tooltipviews").html($("#tooltipviews").attr("data-backup"));
			setSortOrder();
		}
	});
	$('.ca_toolsView').tooltipster({
		multiple: true,
		triggerOpen: { mouseenter: true },
		delay: [3000,0],
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			if ( ! isIconEnabled(origin) ) {
				var displayContent = "Changing Of Views Disabled";
			} else {
				var displayContent = "Click to change the view settings";
			}
			instance.content(displayContent);
		}
	});
	$('.ca_credits').tooltipster({
		trigger: 'custom',
		triggerOpen: {mouseenter:false,click:true,touchstart:true},
		contentAsHTML: true,
		distance: -15,
		maxWidth:550,
		minWidth:550,
		animation: 'none',
		animationDuration: [1500,250],
		triggerClose:{click:true,scroll:true,mouseleave:true,delay:1},
		interactive: true,
		viewportAware: true,
		functionBefore: function(instance,helper) {
			instance.content("<div style='overflow:scroll; max-height:550px; height:550px; overflow-x:hidden; overflow-y:auto;'><center><img src='/plugins/community.applications/images/community.applications.png'><br><font size='6' color='white'>Community Applications</font><br><br><?=$caCredits?></div>");
		}
	});
	$('.ca_stats').tooltipster({
		trigger: 'custom',
		triggerOpen: {mouseenter:false,click:true,touchstart:true},
		contentAsHTML: true,
		distance: -15,
		maxWidth:550,
		minWidth:550,
		animation: 'none',
		animationDuration: [1500,250],
		triggerClose:{click:true,scroll:true,mouseleave:true,delay:1},
		interactive: true,
		viewportAware: true,
		functionBefore: function(instance,helper) {
			$.post(URL,{action:'statistics'},function(data) {
				if (data) {
					instance.content(data);
				}
			});
		}
	});
	$('.ca_section').tooltipster({
		trigger: 'custom',
		triggerOpen: {click:true,touchstart:true},
		contentAsHTML: true,
		animation: 'none',
		delay: [1000, 2000],
		distance: -15,
		arrow: true,
		triggerClose:{click:true,scroll:true,mouseleave:true},
		interactive: true,
		viewportAware: true,
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			if ( !isIconEnabled(origin) ) {
				var displayContent = null;
			} else {
				var currentSection = data.section;
				$(".appButtons").prop("disabled",false);
				$("#"+currentSection).prop("disabled",true);
				var displayContent = $("#sections").html();
			}
			instance.content(displayContent);
		},
		functionReady: function(instance,helper) {
			$(".appButtons").click(function() { $(this).prop("disabled",true); });
		}
	});
	$('.ca_section').tooltipster({
		multiple: true,
		delay: [3000,0],
		triggerOpen: { mouseenter: true },
		functionBefore: function(instance,helper) {
			instance.content('Click to switch from available apps, installed apps, previous apps, pinned apps');
		}
	});
		
	$('.ca_categories').tooltipster({
		trigger: 'custom',
		triggerOpen: {click:true,touchstart:true},
		contentAsHTML: true,
		animation: 'none',
		delay: [1000, 2000],
		distance: -15,
		arrow: true,
		triggerClose:{click:true,scroll:true,mouseleave:true,delay:1},
		interactive: true,
		viewportAware: true,
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			if ( ! isIconEnabled(origin) ) {
				var displayContent = null;
			} else {
				$(".allButtons").prop("disabled",false);
				$("#"+data.selected_category).prop("disabled",true);
				var displayContent = $("#MainCategory").html();
			}
			instance.content(displayContent);
		},
		functionReady: function(instance,helper) {
			$(".allButtons").click(function() {
				$(this).prop("disabled",true);
				data.selected_category = this.id;
				changeCategory(this,false);
			});
		}
	});
	
	$('.ca_categories').tooltipster({
		multiple: true,
		triggerOpen: { mouseenter: true },
		delay: [3000,0],
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			if ( ! isIconEnabled(origin) ) {
				var displayContent = "Changing Of Categories Disabled In This Section";
			} else {
				var displayContent = "Click to display categories of apps";
			}
			instance.content(displayContent);
		}
	});
	$('.ca_subcategories').tooltipster({
		trigger: 'custom',
		triggerOpen: {click:true,touchstart:true},
		contentAsHTML: true,
		animation: 'none',
		delay: [1000, 2000],
		distance: -15,
		arrow: true,
		triggerClose:{click:true,scroll:true,mouseleave:true,delay:1},
		interactive: true,
		viewportAware: true,
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			if ( ! isIconEnabled(origin) ) {
				var displayContent = null;
			} else {
				var currentSub = data.subcategory;
				$(".allButtons").prop("disabled",false);
				$("#"+data.selected_subcategory).prop("disabled",true);
				var displayContent = $(currentSub).html();
			}
			instance.content(displayContent);
		},
		functionReady: function(instance,helper) {
			$(".allButtons").click(function() {
				$(this).prop("disabled",true);
				data.selected_subcategory = this.id;
				changeCategory(this,true);
			});
		}
	});
	$('.ca_subcategories').tooltipster({
		multiple: true,
		delay: [3000,0],
		triggerOpen: { mouseenter: true },
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			if ( ! isIconEnabled(origin) ) {
				var displayContent = "No sub-categories available to display";
			} else {
				var displayContent = "Click to display a subcategories of apps";
			}
			instance.content(displayContent);
		}
	});

	$(".initDockerSearch").click(function()     { initDockerSearch(); });
	$(".moduleButton").click(function()         { caModules(); });
	$(".multi_installButton").click(function()  { installMulti(); });
	$(".multi_installClear").click(function()   { clearMultiInstall(); });
	$("#homeIcon").click(function()             { appStore(); });

/* Everything is now initialized.  This is the start of the actual "real" code */
	if ( "<?=$firstRun?>" == "true" ) {
		sweetAlertBackground("white");
		swal({
			title: 'Disclaimer',
			text: 'All applications listed here are 3rd party additions to unRaid.  Neither the authors of CA nor Limetech make any warranty as to the suitability of any application listed here. <br><em>Every attempt is made to ensure that only safe and compatible applications are present</em><font size=0><br>Note: if your flash drive is corrupted you may also see this message and it will need to be fixed first</font>',
			html: true,
			type: 'error',
			footer: "test",
			showCancelButton: true,
			showConfirmButton: true,
			confirmButtonText: 'I Understand'
		},
		function (isConfirm) {
			if ( isConfirm ) {
				$.post(URL,{action:'dismiss_warning'},function(data) {
					if (data) {
						location.reload();
					}
				});
			} else {
				$("#myForm,#appWarningForm").toggle();
			}
		});
	} else {
		if ( (document.referrer.indexOf("/Apps/") > 1) && ( document.referrer.indexOf("/Apps/ca_settings") < 1 ) && cookiesEnabled() ) {
			restoreState();
			changeSortOrder(null,null,null);
		} else {
			updateContent();
		}
	}
});

function updateContent() {
		disableSearch();
		myAlert("Updating Content","Retrieving the latest application Lists",true,"40");
		$.post(URL,{action:'force_update'}, function(data) {
			if (data) {
				if ( $.cookie("plugininstallpending") ) {
					var plugins = $.cookie("plugininstallpending");
					$.removeCookie("plugininstallpending");
					myCloseAlert();
					openBox('/plugins/<?=$plugin?>/scripts/installMultiPlugin.sh&arg1='+plugins,'Install Plugin Applications',600,900,true);
				} else {
					getContent(true,'INITIALIZE','None Selected');
				}
			}
		});
}

function enableIcon(icon,enable) {
	enable = (enable == "false") ? false : enable;
	$(icon).each(function() {
		$(this).removeClass("enabledIcon disabledIcon");
		if ( enable ) {
			$(this).addClass("enabledIcon");
		} else {
			$(this).addClass("disabledIcon");
		}
	});
}

function isIconEnabled(icon) {
	return $(icon).hasClass("enabledIcon");
}

function setToolTip() {
	$('.ca_multiselect').click( function() {
		enableMultiInstall();
	});
	$('.ca_appPopup').attr('title','Loading...');
	$('.ca_infoPopup').attr('title','Loading...');
	$('.ca_tooltip').tooltipster({
		contentAsHTML:true,
		delay:[<?=$cfg['hoverTime']?>,1],
		timer:15000,
		animation:'none',
		arrow:true,
		trigger:'custom',
		triggerOpen:{mouseenter: true},
		triggerClose:{click:true,scroll:true,mouseleave:true}
	});
	
	$('.ca_infoPopup').tooltipster({
		contentAsHTML: true,
		maxWidth:550,
		minWidth:550,
		distance:-10,
		animation: 'none',
		trigger: 'custom',
		triggerOpen: {mouseenter:false,click:true,touchstart:true},
		triggerClose:{click:true,scroll:true,mouseleave:true},
		delay:[<?=$cfg['hoverTime']?>,1],
		interactive: true,
		viewportAware: true,
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			var app = origin.attr('data-app');
			var name = origin.attr('data-name');
			$.post("/plugins/<?=$plugin?>/scripts/showInfo.php",{action:'none',app:app,name:name},function(data) {
				if (data) {
					instance.content(data);
				}
			});
		}
	});
	
	$('.ca_appPopup').tooltipster({
		contentAsHTML: true,
		maxWidth:550,
		minWidth:550,
		animation: 'none',
		arrow:true,
		trigger: 'custom',
		triggerOpen: {mouseenter:true,click:true,touchstart:true},
		triggerClose:{click:true,scroll:false,mouseleave:true},
		delay:[<?=$cfg['hoverTime']?>,<?=$cfg['hoverTime']?>],
		distance: -15,
		interactive: true,
		viewportAware: true,
		functionBefore: function(instance,helper) {
			var origin = $(helper.origin);
			var appPath = origin.attr('data-appPath');
			$.post("/plugins/<?=$plugin?>/scripts/showDesc.php",{action:'none',appPath:appPath},function(data) {
				if (data) {
					instance.content(data);
				}
			});
		},
		functionReady: function(instance,helper) {
			$('.ca_apptooltip').tooltipster({
				contentAsHTML:true,
				delay:[1000,1],
				timer:15000,
				animation:'none',
				arrow:true, trigger:'custom',
				triggerOpen:{mouseenter: true},
				triggerClose:{click:true,scroll:true,mouseleave:true}
			});
		}
	});
}

function showSpecialCategory(button) {
	$(".multi_installDiv").hide();
	enableIcon("#categoryIcon,#subcategoryIcon",true);
	data.selected_category = "DOESNTMATTERWHATSHERE";
	data.section = "AppStore";
	changeCategory(button,false);
}

function changeCategory(button,subSwitch) {
	var description = button.value;
	var category = button.id;
	clearSearchBox();

	$('.allButtons').prop('disabled', false);
	$(button).prop("disabled",true);

	if ( typeof categorySub[button.id] !== "undefined" ) {
		category = categorySub[button.id];
	}
	if ( typeof categoryDesc[button.id] !== "undefined" ) {
		description = categoryDesc[button.id];
	}
	resetSortByDate();
	var newFlag = false;
	if ( ! subSwitch ) {
		switch (category) {
			case "network:":
				enableIcon("#subcategoryIcon",true);
				data.subcategory = "#NetworkCategory";
				data.selected_subcategory = "network";
				break;
			case "MediaApp:":
				enableIcon("#subcategoryIcon",true);
				data.subcategory = "#MediaAppCategory";
				data.selected_subcategory = "MediaApp";
				break;
			case "MediaServer:":
				enableIcon("#subcategoryIcon",true);
				data.subcategory = "#MediaServerCategory";
				data.selected_subcategory = "MediaServer";
				break;
			case "tools:":
				enableIcon("#subcategoryIcon",true);
				data.subcategory = "#ToolsCategory";
				data.selected_subcategory = "tools";
				break;
			case "New":
				enableIcon("#subcategoryIcon",false);
				$("#dateButton").show();
				forceSortOrder("#Date","#Down");
				newFlag = true;
				break;
			default:
				enableIcon("#subcategoryIcon",false);
				break;
		}
	}
	getContent(false,category,description,newFlag);
}

function changePage(pageNumber) {
	var sortOrder = getSortOrder();
	var windowWidth = getWindowWidth();
	var maxPerPage = getPerPage();
	var selected = data.selected;
	data.currentpage = pageNumber;

	mySpinner();
	$.post(URL,{action:'display_content',sortOrder:sortOrder,windowWidth:windowWidth,pageNumber:pageNumber,maxPerPage:maxPerPage,selected:selected},function(data3) {
		if (data3) {
			updateDisplay(data3);
			readMore();
			setToolTip();
			myCloseAlert();
		}
	});
}

function getWindowWidth() {
	return $('.tabs').width();
}

function myAlert(description,textdescription,textimage,imagesize, outsideClick, showCancel, showConfirm, alertType) {
	if ( !outsideClick ) outsideClick = false;
	if ( !showCancel )   showCancel = false;
	if ( !showConfirm )  showConfirm = false;
	if ( imagesize == "" ) { imagesize = "80"; }
	disableTooltipster();
	disableSearch();
	var backgroundColor = ( ! textdescription && textimage ) ? "transparent" : "white";
	sweetAlertBackground(backgroundColor);
	if ( textimage ) {
		textdescription = textdescription + "<br><br><center><i class='fa fa-spinner fa-spin' style='font-size:"+imagesize+"px;color:#DEB887;' aria-hidden='true'></i></center>";
	}
	swal({
		title: description,
		text: textdescription,
		allowOutsideClick: outsideClick,
		showConfirmButton: showConfirm,
		showCancelButton: showCancel,
		type: alertType,
		animation: false,
		html: true
	});
}

function myCloseAlert() {
	swal.close();
	enableTooltipster();
	enableSearch();
}

function mySpinner() {
	myAlert("",""," ",150);
}

function sweetAlertBackground(color) {
	$(".sweet-alert").css("background",color);
}

function readMore() {
	$('.desc_readmore').readmore({maxHeight:100,moreLink:"<a href='#' class='myReadmore' title='Show More'><i class='fa fa-chevron-down myReadmoreButton'></i></a>",lessLink:"<a class='myReadmore' href='#' title='Show Less'><i class='fa fa-chevron-up myReadmoreButton'></i></a>"});
}

function doSearch(button,newSearch) {
	var windowWidth = getWindowWidth();
	if ( ! newSearch === false ) {
		$('#searchBox').val(newSearch);
	}
	var filter = $('#searchBox').val();
	var maxPerPage = getPerPage();
	resetSortByDate();
	data.docker = "";
	data.section = "AppStore";
	filter = filter.replace(/[^a-z0-9]/gi,' ')
	filter = myTrim(filter);
	$('#searchBox').val(filter);
	$("#maxPerPage").prop("disabled",false);
	$(".multi_installDiv").hide();
	$("#templates_content,#AppsOnly,#templateSortButtons").show();

	if ($('#searchButton').hasClass('fa-search')) {
		if (filter) {
			$('#searchButton').toggleClass('fa-search fa-remove');
		}
	} else if (button) {
		clearSearchBox();
		filter = '';
	} else {
		if (!filter) {
			return;
		}
	}

	$("#Total1").show();
	if (filter) {
		$("#Category").html(" Search Results for <font color='green'>"+filter+"</font>");
	}

	$("#sortButtons,#MainCategory").show();
	enableIcon("#sortIcon,#categoryIcon",true);
	enableIcon("#subcategoryIcon",false);
	$("#NetworkCategory,#MediaAppCategory,#MediaServerCategory,#NONE,#ToolsCategory").hide();
	window.scrollTo(0,0);
	
	if ( !filter ) {
		getContent(true,'INITIALIZE','None Selected');
		return;
	}
	var sortOrder = getSortOrder();
	if ( "<?=$cfg['dockerSearch']?>" == "yes" ) {
		$('.dockerSearch').show();
	}
	mySpinner();

	$.post(URL,{action:'get_content',filter:filter,sortOrder:sortOrder,windowWidth:windowWidth,maxPerPage:maxPerPage},function(data) {
		if (data) {
			enableButtons();
			updateDisplay(data);
			data.section = "AppStore";
			$("#currentSection").html("Available Apps");
			readMore();
			myCloseAlert();
			setToolTip();
		}
	});
}

function disableTooltipster() {
	$('.tooltipstered').tooltipster('disable');
}
function enableTooltipster() {
	$('.tooltipstered').tooltipster('enable');
}

function forceUpdate() {
	$("#updateButton").prop("disabled",true);
	$("#Category").html("");
	$("#Total").html("Updating...");
	clearSearchBox();
	$.post(URL,{action:'force_update'},function(data){
		if (data) {
			getContent(true,'INITIALIZE','None Selected');
		}
	});
}

function forceUpdateButton() {
	var mode = $('#updateButton').html();
	if ( mode == 'appFeed Mode' ) {
		$.post(URL,{action:'force_update_button'},function(data) {
			if (data) {
				myAlert("Updating Content","Retrieving the latest application Lists",true,"40");
				forceUpdate();
			}
		});
	} else {
		sweetAlertBackground("white");
		disableSearch();
		swal({
			title: "Switch To Legacy Mode?",
			text: "<strong>This will force CA to manually download the application templates.</strong><br><br><font color='red'>This process once begun cannot be aborted and may take a minute or so</font>",
			type: "warning",
			confirmButtonColor: "#DD6B55",
			confirmButtonText: "Update Lists",
			showCancelButton: true,
			showConfirmButton: true,
			closeOnConfirm: false,
			allowOutsideClick: true,
			showLoaderOnConfirm: true,
			html: true
		},
		function(isConfirm) {
			if (isConfirm) {
				clearSearchBox();
				$.post(URL,{action:'force_update_button'});
				myAlert("Switching to Legacy Mode","Downloading <span id='downloadStatus'>Repository List</span>");
				$.post(URL,{action:'downloadRepositories'},function(data) {
					if (data) {
						repositories = JSON.parse(data);
						disableSearch();
						downloadRepo(repositories,0);
					}
				});
			} else {
				enableSearch();
			}
		});
	}
}

function downloadRepo(repositories,index) {
	var percentage = parseInt(index / repositories.length * 100);
	$("#downloadStatus").html(percentage+"%<br>"+repositories[index].name+"<br><font size='0'>"+repositories[index].url);
	$.post(URL,{action:'downloadRepo',repoURL:repositories[index].url,repoName:repositories[index].name}, function(data) {
		if ( data ) {
			if ( repositories[index+1] ) {
				downloadRepo(repositories,index+1);
			} else {
				processLegacyMode();
				enableSearch();
			}
		}
	});
}

function processLegacyMode() {
	myCloseAlert();
	getContent(true,'INITIALIZE','None Selected');
}

function enableButtons() {
	data.selected_category = "";
}

function changeSortOrder(button,buttonClass,previousApps) {
	var windowWidth = getWindowWidth();
	var pageNumber = data.currentpage;
	var maxPerPage = getPerPage();
	var selected = data.selected;

	if ( previousApps != "true" )
	{
		$("."+buttonClass).prop("disabled", false);
		$("#"+button).prop("disabled", true);
	}

	if ( button == "Date" || button == "Downloads" ) {
		$("#Down").prop("disabled", true);
		$("#Up").prop("disabled", false);
	}

	mySpinner();
	var sortOrder = getSortOrder();
	$.post(URL,{action:'display_content',sortOrder:sortOrder,windowWidth:windowWidth,pageNumber:pageNumber,maxPerPage:maxPerPage,selected:selected},function(data3) {
		if (data3) {
			updateDisplay(data3);
			readMore();
			setToolTip();
			myCloseAlert();
		}
	});
}

function getPerPage() {
	return $("#maxPerPage").val();
}

function getSortOrder() {
	var sortOrder = new Object();
	var jsonOrder = new Object();

	if ( $("#Name").prop("disabled") )           { sortOrder.sortBy = ["sortBy","Name"];                 jsonOrder.sortBy = "#Name"; }
	if ( $("#RepoName").prop("disabled") )       { sortOrder.sortBy = ["sortBy","RepoName"];             jsonOrder.sortBy = "#RepoName"; }
	if ( $("#Author").prop("disabled") )         { sortOrder.sortBy = ["sortBy","SortAuthor"];           jsonOrder.sortBy = "#Author"; }
	if ( $("#Date").prop("disabled") )           { sortOrder.sortBy = ["sortBy","Date"];                 jsonOrder.sortBy = "#Date"; }
	if ( $("#Downloads").prop("disabled") )      { sortOrder.sortBy = ["sortBy","downloads"];            jsonOrder.sortBy = "#Downloads"; }

	if ( $("#Up").prop("disabled") )             { sortOrder.sortDir = ["sortDir","Up"];                 jsonOrder.sortDir = "#Up"; }
	if ( $("#Down").prop("disabled") )           { sortOrder.sortDir = ["sortDir","Down"];               jsonOrder.sortDir = "#Down"; }

	$("#sortorder").attr("data-sortorder",JSON.stringify(jsonOrder));
	return [sortOrder.sortBy,sortOrder.sortDir];
}

function forceSortOrder(sort,dir) {
	$(".sortButton,.dirButton").prop("disabled",false);
	$(sort).prop("disabled",true);
	$(dir).prop("disabled",true);
	getSortOrder();
}

function isSortByDate() {
	return $("#Date").prop("disabled");
}

function resetSortByDate() {
	if ( isSortByDate() ) {
		$("#dateButton").hide();
		forceSortOrder("#Name","#Up");
		getSortOrder();
	}
}

// needed for tooltipster
function setSortOrder() {
	var sortOrder = JSON.parse($("#sortorder").attr("data-sortorder"));
	$(".viewButton,.sortButton,.dirButton").prop("disabled",false);
	$(sortOrder.sortBy).prop("disabled",true);
	$(sortOrder.sortDir).prop("disabled",true);
}

function getContent(init,category,description,newApp) {
	data.currentpage = 1;
	var initialize;
	
	enableSearch();
	if ( init == true ) {
		enableIcon("#sortIcon, #subcategoryIcon",false);
	} else {
		enableIcon("#sortIcon",true);
		mySpinner();
	}
	$("#sortButtons,#templateSortButtons,#Total1").show();
	var windowWidth = getWindowWidth();
	$("#maxPerPage").prop("disabled",false);

	switch (category) {
		case 'network:':
			$("#MainCategory").hide();
			$("#NetworkCategory,#NONE").show();
			$("#network").prop("disabled",true);
			break;
		case 'MediaApp:':
			$("#MainCategory").hide();
			$("#MediaAppCategory,#NONE").show();
			$("#MediaApp").prop("disabled",true);
			break;
		case 'MediaServer:':
			$("#MainCategory").hide();
			$("#MediaServerCategory,#NONE").show();
			$("#MediaServer").prop("disabled",true);
			break;
		case 'tools:':
			$("#MainCategory").hide();
			$("#ToolsCategory,#NONE").show();
			$("#tools").prop("disabled",true);
			break;
		case '':
			$("#All").prop("disabled",true);
			$("#NetworkCategory,#MediaServerCategory,#MediaAppCategory,#NONE,#ToolsCategory").hide();
			$("#MainCategory,#New").show();
			break;
		case 'NONE':
			$("#NetworkCategory,#MediaServerCategory,#MediaAppCategory,#NONE,#ToolsCategory").hide();
			$("#MainCategory").show();
			break;
	}

	if ( category != "NONE" ) {
		if ( category == "INITIALIZE" ) {
			initializeAppStore();
			category = "NONE";
			initialize = true;
			enableButtons();
			$("#All").prop("disabled",true);
			$("#NetworkCategory,#MediaServerCategory,#MediaAppCategory,#NONE,#ToolsCategory,#Total1").hide();
			$("#MainCategory,#New").show();
		}
		if ( (category == "New") || (category == "All") ) { category = ""; }

		var sortOrder = getSortOrder();
		var maxPerPage = getPerPage();

		$.post(URL,{action:'get_content',category:category,newApp:newApp,sortOrder:sortOrder,windowWidth:windowWidth,maxPerPage:maxPerPage},function(data) {
			if (data) {
				description = "Category: <font color='green'>"+description+"</font>";
				$("#Category").html(description);
				$("#updateButton").prop("disabled",false);
				updateDisplay(data);
				if ( initialize ) {
					populateAutoComplete();
				}
				readMore();
				myCloseAlert();
				setToolTip();
			}
		});
	}
	$('.dockerSearch').hide();
	setSortOrder();
}

function populateAutoComplete() {
	$.post(URL,{action:'populateAutoComplete'},function(data) {
		if (data) {
			$("#awesomepleteScript").html(data);
			searchBoxAwesomplete.maxItems = 20;
		}
	});
}

function mySearch(filter) {
	filter = filter.replace(/<(?:.|\n)*?>/gm, '');
	$('#searchBox').val(filter);

	if ( $("#searchButton").hasClass('fa-search') ) {
		$('#searchButton').toggleClass('fa-search fa-remove');
	}
	initDockerSearch(1);
}

function initDockerSearch() {
	$("#maxPerPage").prop("disabled",true);
	dockerSearch(1);
	data.docker = "searching docker";
	data.section = "";
	data.selected_category = "";
	enableIcon("#categoryIcon,#subcategoryIcon",false);
}

function dockerSearch(pageNumber) {
	var filter = $('#searchBox').val();
	var dockerURL = "https://registry.hub.docker.com/search?q=" + filter;
	var windowWidth = getWindowWidth();
	data.docker = "searching docker";
	$("#AppsOnly,#New,#UNCATEGORIZED,#All,#sortButtons").show();
	enableIcon("#sortIcon",false);
	$(".dockerSearch,#templateSortButtons,.multi_installDiv").hide();
	$("#currentSection").html("Available Apps");
	$("#Category").html("DockerHub Search Results For <font color='red'>"+filter+"</font> <span id='pageNumber'></span>");
	var sortOrder = getSortOrder();
	mySpinner();
	$.post(URL,{action:'search_dockerhub',filter:filter,page:pageNumber,sortOrder:sortOrder,windowWidth:windowWidth},function(data) {
		if (data) {
			updateDisplay(data);
			readMore();
			myCloseAlert();
			setToolTip();
		}
	});
}

function dockerConvert(dockerID) {
	mySpinner();

	totalDisplayed = $("#Total").html();
	$("#Total").html("Converting...");
	$.post(URL,{action:'convert_docker',ID:dockerID},function(data) {
		if (data) {
			myCloseAlert();
			templateURL = "Apps/AddContainer?xmlTemplate=default:" + myTrim(data);
			window.open(templateURL,"_self");
			$("#Total").html(totalDisplayed);
		}
	});
}

function clearSearchBox() {
	$("#searchBox").val("");
	if ($('#searchButton').hasClass('fa-remove')) {
		$('#searchButton').toggleClass('fa-remove fa-search');
	}
}

function installPlugin(pluginURL) {
	$(".ca_appPopup").tooltipster('close');
	disableSearch();
//	my_openBox('/plugins/dynamix.plugin.manager/scripts/plugin&arg1=install&arg2='+pluginURL,'Install Plugin',600,900,true,"changeSortOrder(null,null,null)");
	my_openBox('/plugins/community.applications/scripts/pluginInstall.sh&arg1=install&arg2='+pluginURL,'Install Plugin',600,900,true,"changeSortOrder(null,null,null)");

}

function my_openBox(cmd,title,height,width,load,func) {
	// open shadowbox window (run in foreground)
	var run = cmd.split('?')[0].substr(-4)=='.php' ? cmd : '/logging.htm?cmd='+cmd+'&csrf_token=<?=$var['csrf_token']?>';
	var options = load ? {modal:true,onClose:function(){ eval(func); }} : {modal:true};
	Shadowbox.open({content:run, player:'iframe', title:title, height:height, width:width, options:options});
}

function showModeration(script,title) {
	$("#sb-nav-close").css("visisbility","visible");
	my_openBox("/plugins/<?=$plugin?>/scripts/showStatistics.php?arg1="+script,title,550,900,true,false);
}

function previousApps(button,installed) {
	setPageOne();
	resetSortByDate();
	mySpinner();
	enableIcon("#categoryIcon, #subcategoryIcon",false);
	data.docker = "";
	if ( installed ) {
		$("#currentSection").html("Installed Apps");
		$(".multi_installDiv").hide();
	} else {
		$("#currentSection").html("Previously Installed Apps");
		$(".multi_installDiv").show();
		clearMultiInstall();
	}

	clearSearchBox();
	$("#maxPerPage").prop("disabled",false);
	$("#"+button).prop("disabled",true);
	data.section = button;

	$(".dockerSearch,#AppsOnly").hide();
	$("#templates_content,#sortButtons,#Total1,#templateSortButtons").show();
	enableIcon("#sortIcon",true);

	if ( button == "OldApps" ) {
		$("#Category").html("All Previously Installed Applications");
	} else {
		$("#Category").html("All Installed Applications");
	}

	$.post(URL,{action:'previous_apps',installed:installed},function(data) {
		if (data) {
			changeSortOrder(null,null,"true");
			myCloseAlert();
		}
	});
}

function removeApp(application, humanName) {
	sweetAlertBackground("white");
	disableSearch();
	swal({
		title: "Delete Template?",
		text: "Are you sure you want to delete <font color='red'><strong><em>"+humanName+"</em></strong></font> from the list of previously installed applications?",
		type: "warning",
		confirmButtonColor: "#DD6B55",
		confirmButtonText: "Yes, delete it!",
		showCancelButton: true,
		showConfirmButton: true,
		html: true
	},
	function(isConfirm) {
		if (isConfirm) {
			$.post(URL,{action:'remove_application',application:application}, function(data) {
				if (data) {
					enableSearch();
					previousApps("OldApps",false);
				}
			});
		} else {
			enableSearch();
		}
	 });
}

function uninstallApp(application,humanName) {
	if ( humanName == "Community Applications" ) {
		myAlert("AE-35 Error","<b><font color='red'>"+humanName+"</font></b> cannot be uninstalled this way.  You must go to the plugins tab and remove Community Applications from there.  <em><font color='purple'>But, why would you ever want to uninstall CA?</font></em>",null,null,true,false,true,"error");
	} else {
		sweetAlertBackground("white");
		disableSearch();
		swal({
			title: "Uninstall Application?",
			text: "Are you sure you want to uninstall <font color='red'><strong><em>"+humanName+"</em></strong></font>?",
			type: "warning",
			showCancelButton: true,
			showConfirmButton: true,
			confirmButtonColor: "#DD6B55",
			confirmButtonText: "Yes, uninstall it!",
			closeOnConfirm: false,
			showLoaderOnConfirm: true,
			html: true
		},
		function(isConfirm) {
			if (isConfirm) {
				swal("Uninstalling "+humanName,"","info");
				$.post(URL,{action:'uninstall_application',application:application}, function(data) {
					if (data) {
						swal("","Uninstalled","success");
						previousApps("InstalledApps",true);
						enableSearch();
					}
				});
			} else {
				enableSearch();
			}
		});
	}
}

function deletePrivateApp(path,name,author) {
	var displayPath = path.replace("/boot/config/plugins/","...");
	sweetAlertBackground("white");
	disableSearch();
	swal({
		title: "Remove Private Application?",
		text: "Are you sure you want to remove the private application <em><font color='red'><b>"+name+"</b></font> by <font color='red'><b>"+author+"</b></font>?<br><font size='0'>("+displayPath+")",
		type: "warning",
			showCancelButton: true,
			showConfirmButton: true,
			confirmButtonColor: "#DD6B55",
			confirmButtonText: "Yes, remove it!",
			closeOnConfirm: false,
			showLoaderOnConfirm: true,
			html: true
	},
	function(isConfirm) {
		if ( isConfirm ) {
			swal("Removing "+name,"","info");
			$.post(URL,{action:'removePrivateApp',path:path},function(data) {
				if (data) {
					myCloseAlert();
					changeSortOrder(null,null,null);
					enableSearch();
				}
			});
		} else {
			enableSearch();
		}
	});
}

function myTrim(x) {
	return x.replace(/^\s+|\s+$/gm,'');
}

function uninstallDocker(application,humanName) {
	sweetAlertBackground("white");
	disableSearch();
	swal({
		title: "Uninstall Application?",
		text: "Are you sure you want to uninstall <font color='red'><strong><em>"+humanName+"</em></strong></font>?",
		type: "warning",
		showCancelButton: true,
		showConfirmButton: true,
		confirmButtonColor: "#DD6B55",
		confirmButtonText: "Yes, uninstall it!",
		closeOnConfirm: false,
		showLoaderOnConfirm: true,
		html: true
	},
	function( isConfirm ) {
		if ( isConfirm ) {
			swal("Uninstalling","","info");
			$.post(URL,{action:'uninstall_docker',application:application},function(data) {
				if (data) {
					enableSearch();
					previousApps("InstalledApps",true);
				}
			});
		} else {
			enableSearch();
		}
	});
}

function appStore() {
	mySpinner();
	data.nextpage = 0;
	data.prevpage = 0;
	initializeAppStore();
	getContent(true,'INITIALIZE','None Selected');
	$("#Category").html("None Selected");
	data.docker = "";
}

function initializeAppStore() {
	enableIcon("#categoryIcon",true);
	$("#currentSection").html("Available Apps");
	data.section = "AppStore";
	data.selected_category = "";
	updateDisplay("");
	$("#NetworkCategory,#MediaAppCategory,#MediaServerCategory,#ToolsCategory,#NONE,.multi_installDiv").hide();
	$("#AppsOnly,#templates_content,#MainCategory").show();
	resetSortByDate();
}
function installPLGupdate(filename,plgName) {
	$(".ca_appPopup").tooltipster('close');
	$("#sortorder").attr("data-plgfilename",filename);
	if ( filename == "community.applications.plg" ) {
		openBox('/plugins/<?=$plugin?>/scripts/updatePLG.sh&arg1='+filename,'Update '+plgName,600,900,true);
	} else {
		my_openBox('/plugins/<?=$plugin?>/scripts/updatePLG.sh&arg1='+filename,'Update '+plgName,600,900,true,"checkPLGupdate()");
	}
}
function checkPLGupdate() {
	var filename = $("#sortorder").attr("data-plgfilename");
	$.post(URL,{action:'updatePLGstatus',filename:filename},function(data) {
		if (data) {
			var pageNumber = data.currentpage;
			changePage(pageNumber);
		}
	});
}

function pinApp(button,repository) {
	$(button).toggleClass("pinned unpinned");
	if ( $(button).hasClass("unpinned") ) {
		$(button).attr("title","Click to pin this application");
	} else {
		$(button).attr("title","Click to unpin this application");
	}
	$(button).tooltipster('content',$(button).attr("title"));
	$(button).attr("title","");
	$.post(URL,{action:'pinApp',repository:repository});
}

function setPageOne() {
	data.currentpage = 1;
}

function pinnedApps(button) {
	setPageOne();
	mySpinner();
	enableIcon("#categoryIcon, #subcategoryIcon",false);
	$("#currentSection").html("Pinned Apps");
	data.docker = "";
	$("#maxPerPage").prop("disabled",false);
	$("#"+button).prop("disabled",true);
	data.section = button;
	clearSearchBox();
	$(".dockerSearch,#AppsOnly,.multi_installDiv").hide();
	$("#templates_content,#sortButtons,#Total1,#templateSortButtons").show();
	enableIcon("#sortIcon",true);
	resetSortByDate();
	$("#Category").html("All Pinned Applications");
	$.post(URL,{action:'pinnedApps'},function(data) {
		if (data) {
			changeSortOrder(null,null,null);
			myCloseAlert();
		}
	});
}

function displayTags(leadTemplate) {
	$.post(URL,{action:'displayTags',leadTemplate:leadTemplate},function(data) {
		if (data) {
			$(".ca_appPopup").tooltipster('close');
			sweetAlertBackground("white");
			disableSearch();
			swal({
				title: "Choose A Branch To Install",
				text: data,
				html: true,
				type: "warning",
				showCancelButton: true,
				showConfirmButton: false,
				allowOutsideClick: true
			}, function(isConfirm) {
				if ( ! isConfirm ) {
					enableSearch();
				}
			});
		}
	});
}

function changeDisplayed() {
	var maxPerPage = $("#maxPerPage").val();
	$.cookie("maxPerPage",maxPerPage);
	changePage('1');
}

function makePlural(string,count) {
	if ( (count > 1) || (count == 0) ) {
		return string + "s";
	} else {
		return string;
	}
}

function getSelectedApps() {
	if ( data.selected ) {
		var selected = JSON.parse(data.selected);
		var docker = selected.docker;
		var plugin = selected.plugin;
	} else {
		var selected = new Object();
		var docker = new Array();
		var plugin = new Array();
	}

	$(".ca_multiselect").each(function() {
		var name = $(this).attr("data-name");
		if ( $(this).is(':checked') ) {
			if ( $(this).attr("data-type") == "plugin" ) {
				plugin.push(name);
			} else {
				docker.push(name);
			}
		} else {
			var index = plugin.indexOf(name);
			if ( index > -1 ) {
				plugin.splice(index,1);
			}
			var index = docker.indexOf(name);
			if (index > -1 ) {
				docker.splice(index,1);
			}
		}
	});
	selected.docker = uniqueArrayElements(docker);
	selected.plugin = uniqueArrayElements(plugin);
	data.selected = JSON.stringify(selected);
	return selected;
}

function uniqueArrayElements(sourceArray) {
	var uniqueEntries = new Array();
	$.each(sourceArray, function(i, el) {
		if ($.inArray(el,uniqueEntries) === -1) {
			uniqueEntries.push(el)
		}
	});
	return uniqueEntries;
}

function enableMultiInstall() {
	var selected = getSelectedApps();
	if ( $.isEmptyObject(selected.docker) && $.isEmptyObject(selected.plugin) ) {
		$(".multi_install,.multi_installClear").attr("disabled",true);
		$(".multi_installButton").val("Install Selected Applications");
	} else {
		$(".multi_install,.multi_installClear").attr("disabled",false);
		var count = selected.plugin.length + selected.docker.length;
		$(".multi_installButton").val("Install "+(selected.plugin.length+selected.docker.length)+" Selected "+makePlural("Application",count));
	}
	getSelectedApps();
}

function clearMultiInstall() {
	data.selected = "";
	$(".ca_multiselect").each(function() {
		$(this).prop("checked",false);
	});
	$(".multi_install,.multi_installClear").attr("disabled",true);
	enableMultiInstall();
}

function installMulti() {
	var docker = new Array();
	var plugin = "";
	var pluginCount = 0;
	var dockerCount = 0;
	var selected = getSelectedApps();
	var cookieWarning = "";
	
	$.each(selected.plugin,function(i,el) {
		plugin += el + "*";
		pluginCount += 1;
	});
	$.each(selected.docker,function(i,el) {
		docker.push(el);
		dockerCount += 1;
	});
	sweetAlertBackground("white");
	disableSearch();
	if ( ! cookiesEnabled() && dockerCount && pluginCount ) {
		pluginCount = 0;
		cookieWarning = "<br>Cookies not enabled.  Plugins must be separately installed from docker applications";
	}
	swal({
		title: "Install "+makePlural("Application",dockerCount+pluginCount)+"?",
		text: "Are you sure you want to install "+dockerCount+" docker "+makePlural("application",dockerCount)+" and "+pluginCount+" "+makePlural("plugin",pluginCount)+"?.  <em>Docker applications will be installed utilizing the most recently saved template with no user input on your part</em><font color='red'>"+cookieWarning+"</font>",
		type: "info",
		showCancelButton: true,
		showConfirmButton: true,
		confirmButtonColor: "#DD6B55",
		confirmButtonText: "Yes, install them",
		closeOnConfirm: false,
		showLoaderOnConfirm: true,
		html: true
	},
	function( isConfirm ) {
		if ( isConfirm ) {
			myCloseAlert();
			if ( docker.length && plugin.length ) {
				$.cookie("plugininstallpending",plugin);
			}
			if ( docker.length ) {
				$("#sb-nav-close").css("visibility","hidden"); // Because docker install cannot be aborted so why allow window to close
				openBox('/plugins/<?=$plugin?>/scripts/installMulti.php?plugin='+plugin+'&docker='+docker,'Install Docker '+makePlural("Application",dockerCount),600,900,true);
			} else {
				openBox('/plugins/<?=$plugin?>/scripts/installMultiPlugin.sh&arg1='+plugin,'Install Plugin '+makePlural("Application",pluginCount),600,900,true);
				enableSearch();
			}
		} else {
			enableSearch();
		}
	});
}

function updateDisplay(data) {
	$('#templates_content').html(data);
	$('img').on("error",function() {
		$(this).attr('src',"/plugins/dynamix.docker.manager/images/question.png");
	});
	enableSearch();
	saveState();
}
function saveState() {
	if ( ! dockerSearchFlag ) {
		$.cookie("sectionText",$("#currentSection").html());
		$.cookie("categoryText",$("#Category").html());	
		$.cookie("data",JSON.stringify(data));

		$.cookie("dockerSearchFlag",dockerSearchFlag);
		$.cookie("homeIcon",isIconEnabled("#homeIcon"));
		$.cookie("sectionIcon",isIconEnabled("#sectionIcon"));
		$.cookie("categoryIcon",isIconEnabled("#categoryIcon"));
		$.cookie("subcategoryIcon",isIconEnabled("#subcategoryIcon"));
		$.cookie("sortIcon",isIconEnabled("#sortIcon"));
		$(".sortButton").each(function() {
			if ( $(this).prop("disabled") ) {
				$.cookie("sortButton",this.id);
			}
		});
		$(".dirButton").each(function() {
			if ( $(this).prop("disabled") ) {
				$.cookie("dirButton",this.id);
			}
		});
	}
}

function restoreState() {
	$("#currentSection").html($.cookie("sectionText"));
	$("#Category").html($.cookie("categoryText"));
	data = JSON.parse($.cookie("data"));
	
	dockerSearchFlag = $.cookie("dockerSearchFlag");
	enableIcon("#homeIcon",$.cookie("homeIcon"));
	enableIcon("#sectionIcon",$.cookie("sectionIcon"));
	enableIcon("#categoryIcon",$.cookie("categoryIcon"));
	enableIcon("#subcategoryIcon",$.cookie("subcategoryIcon"));
	enableIcon("#sortIcon",$.cookie("sortIcon"));
	$(".sortButton").prop("disabled",false);
	$(".dirButton").prop("disabled",false);
	$("#"+$.cookie("sortButton")).prop("disabled",true);
	$("#"+$.cookie("dirButton")).prop("disabled",true);
	populateAutoComplete();
}

function disableSearch() {
	$("#searchBox").prop("disabled",true);
}
function enableSearch() {
	$("#searchBox").prop("disabled",false);
}

function evaluateBoolean(str) {
		regex=/^\s*(true|1|on)\s*$/i
		return regex.test(str);
}

function cookiesEnabled() {
	return evaluateBoolean(navigator.cookieEnabled);
}

function stringToBoolean(string) {
	switch(string.toLowerCase().trim()){
		case "true": case "yes": case "1": return true;
		case "false": case "no": case "0": case null: return false;
		default: return Boolean(string);
	}
}

function resizeDisplay() {
	window.resizeEvt;
	$(window).resize(function(){
		var newWidth = getWindowWidth();
		var oldWidth = data.oldWindowWidth;
		data.oldWindowWidth = newWidth;
		var divisor = <?=$template['detail']['templateWidth']?>;

<?if ( $mobileDevice ):?>  // Mobile devices only check if columns change.  Computers always check to re-center the display
		if ( Math.floor(newWidth / divisor) != Math.floor(oldWidth / divisor) ) {
			$("#templates_content").empty();
			clearTimeout(window.resizeEvt);
			window.resizeEvt = setTimeout(function(){
				$("#templates_content").empty();
				changeSortOrder(null,null,null);
			}, 100);
		}
<?else:?>
		if ( newWidth != oldWidth ) {
			$("#templates_content").empty();
			clearTimeout(window.resizeEvt);
			window.resizeEvt = setTimeout(function(){
				$("#templates_content").empty();
				changeSortOrder(null,null,null);
			}, 100);
		}
<?endif;?>
	});
}

function isTouch() {
	try{ document.createEvent("TouchEvent"); return true; }
	catch(e){ return false; }
}

</script>
<FORM method="get" id="myForm">
<body onresize='resizeDisplay();' id='CommunityApplicationsBody'>
<span style='float:right;'><a class='ca_staticTips topRightLinks' title='Display The CA Manual' href="Settings/caHelp" target='_blank'>CA Manual</a><a class='ca_stats topRightLinks' title='Gathering Statistics' style='cursor:pointer;'>Statistics</a><a class='ca_credits topRightLinks' style='cursor:pointer'>Credits</a><a class='topRightLinks' id='updateButton' onclick='forceUpdateButton();' style='cursor:pointer;display:none;'>Legacy Mode</a><a href='/Apps/ca_settings' target='_self' class='ca_staticTips topRightLinks' title='Adjust Settings'>CA Settings <i class='fa fa-cog' aria-hidden='true'></i></a></span>
<br>
> For help with this plugin, click here (a new tab will open with the help file)  <strong><font size="2"><a href="Settings/caHelp" target="_blank">HELP</a></font></strong><br><br>
> <i class='fa fa-list-ul enabledIcon' aria-hidden='true' style='font-size:20px;'></i> - This chooses which "section" to display (Available Apps, Installed Apps, Previously Installed Apps, Pinned Apps, additional CA Modules<br>
> <i class='fa fa-folder enabledIcon' aria-hidden='true' style='font-size:20px;'></i> - This selects a category of apps to display<br>
> <i class='fa fa-folder-open enabledIcon' aria-hidden='true' style='font-size:20px;'></i> - When available, this selects a subcategory of apps to display<br>
> <i class='fa fa-binoculars enabledIcon' aria-hidden='true' style='font-size:20px;'></i> - This chooses how to display the results<br><br>
> <i class='fa fa-download' aria-hidden='true' style='font-size:20px;'></i> <i class='fa fa-edit' aria-hidden='true' style='font-size:20px;'></i> <i class='fa fa-refresh' aria-hidden='true' style='font-size:20px;'></i> - These icons respectively will <b>Install, Edit, or Update</b> an application<br>
> <i class='fa fa-globe' aria-hidden='true' style='font-size:20px;'></i> - Clicking this icon will take you to an application's GUI<br>
> Hovering over an application's icon (or clicking it) will display more information about the application<br>
> <center>For support for this plugin, visit <a title='click for help' href="https://lime-technology.com/forums/topic/38582-plug-in-community-applications/" target="_blank">HERE</a></center>
> <center><a href='https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=7M7CBCVU732XG' target='_blank'><img src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif"></a></center>

<i id='homeIcon' class='fa fa-home enabledIcon' aria-hidden='true'></i>&nbsp;
<i id='sectionIcon' class='fa fa-list-ul ca_section enabledIcon' aria-hidden='true'></i>&nbsp;
<i id='categoryIcon' class='fa fa-folder ca_categories enabledIcon' aria-hidden='true'></i>&nbsp;
<i id='subcategoryIcon' class='fa fa-folder-open ca_subcategories disabledIcon' aria-hidden='true'></i>&nbsp;
<i id='sortIcon' class='fa fa-binoculars ca_toolsView disabledIcon' style='font-size:23px; position:relative;top:-2px;' aria-hidden='true'></i>&nbsp;
<font size='3'><b>Section: <font color='green'><span id='currentSection'>Available Apps</span></font></b></font>
<strong><font size='3'><span id="Category"></span></strong></font><span id="Total1" style='float: right';>Total Found: <strong><font size="3"><span id="Total"></span></font></strong><span>&nbsp;&nbsp;Results/page: <select id='maxPerPage' class='narrow' onchange='changeDisplayed();'><option value='10'>10</option><option value='25'>25</option><option value='50'>50</option></select></span></span>
</span><br>

<div id='cookieWarning' style='display:none;'><center><font color='purple'>Community Applications works best when cookies are enabled in your browser.  Certain features may not be 100% functional when cookies are not enabled.  You should enable them for the best experience. </font></center></div>
<?if ( $upgradeAvailable ) :?>
<span id='upgradeAvailable'><center> <font color='red'>An update to Community Applications is Available. Click <a onclick=installPLGupdate('community.applications.plg',"CommunityApplications"); style=cursor:pointer>HERE</a> to install the update  <i class='ca_infoPopup fa fa-info-circle' data-app='community.applications.plg' data-name='Community Applications' style='cursor:pointer;font-size:15px;color:blue;'></i></center></font></span>
<?endif;?>
<div class='dockerSearch' style='display:none'><center><figure><i class='fa fa-docker initDockerSearch' style='font-size:50px;color:DarkCyan;cursor:pointer;'></i><figcaption class='initDockerSearch' style='cursor:pointer;'><a>Click Here To Get More Results From DockerHub</a></figcaption></figure></center></div>
<div style='width:100%; display:none;' class='multi_installDiv'><center><input class='multi_install multi_installButton' type='button' value='Install Selected Applications' disabled><input type='button' class='multi_installClear' value='Clear Selected' disabled></center></div>
<div style='width:100%; display:block;' id='templates_content'></div>
<div style='width:100%; display:none;' class='multi_installDiv'><center><input class='multi_install multi_installButton' type='button' value='Install Selected Applications' disabled><input type='button' class='multi_installClear' value='Clear Selected' disabled></center></div>
</center>
<center><a href='https://lime-technology.com/forums/topic/38582-plug-in-community-applications/' target='_blank'>Support Thread</a></center><br>
<center>Community Applications Version: <?=$installedVersion?></center></div>

<span id='miscScript'></span><span id='awesomepleteScript'></span>

<div>
<div id='tooltipviews' style='display:none;'>
<span id='templateSortButtons'>Sort By:
<input type='button' class='sortButton' id='Name' value='Name' disabled>
<input type='button' class='sortButton' id='RepoName' value='Repository'>
<input type='button' class='sortButton' id='Downloads' value='Downloads'>
<input type='button' class='sortButton' id='Author' value='Author'>
<span id='dateButton' hidden><input type='button' class='sortButton' id='Date' value='Date'></span>
Sort Direction:
<input type='button' class='dirButton' id='Up' value='Ascending' disabled>
<input type='button' class='dirButton' id='Down' value='Descending'>
</span></span>
</div></div>
<span id='sections' style='display:none;'>
<input type='button' class='appButtons' id='AppStore' value='Available Apps' disabled onclick='appStore();'>
<input type='button' class='appButtons' id='InstalledApps' value='Installed Apps' onclick='previousApps(this.id,true);'></input>
<input type='button' class='appButtons' id='OldApps' value='Previous Apps' onclick='previousApps(this.id,false);'></input>
<input type='button' class='appButtons' id='PinnedApps' value='Pinned Apps' onclick='pinnedApps(this.id);'></input>
</span>
<div style='display:none;'>
<span id='MainCategory'>
<input class='allButtons' type=button id='backup' value='Backup'></input>
<input class='allButtons' type=button id='cloud' value='Cloud'></input>
<input class='allButtons' type=button id='downloaders' value='Downloaders'></input>
<input class='allButtons' type=button id='HomeAutomation' value='Home Automation'></input>
<input class='allButtons' type=button id='networkALL' value='Network Services'></input>
<input class='allButtons' type=button id='mediaappALL' value='Media Applications'></input>
<input class='allButtons' type=button id='mediaserverALL' value='Media Servers'></input>
<input class='allButtons' type=button id='productivity' value='Productivity'></input>
<input class='allButtons' type=button id='toolsALL' value='Tools/Utilities'></input>
<input class='allButtons' type=button id='other' value='Other'></input>
<input class='allButtons' type=button id='Plugins' value='Plugins'></input>
&nbsp;&nbsp;&nbsp;&nbsp;
<input class='allButtons' type=button id="New" value='New/Updated'></input>
<input class='allButtons' type=button id="UNCATEGORIZED" value='Uncategorized'></input>
<input class='allButtons' type=button id="All" value='All Apps'></input>
</span>
<span id='NetworkCategory'>
<input class='allButtons' type=button id='networkweb' value='Web Servers'></input>
<input class='allButtons' type=button id='networkdns' value='DNS Clients / Servers'></input>
<input class='allButtons' type=button id='networkftp' value='FTP Clients / Servers'></input>
<input class='allButtons' type=button id='networkproxy' value='Proxies'></input>
<input class='allButtons' type=button id='networkvoip' value='VOIP'></input>
<input class='allButtons' type=button id='networkmanagement' value='Management / Analyzer'></input>
<input class='allButtons' type=button id='networkmessenger' value='Messengers'></input>
<input class='allButtons' type=button id='networkother' value='Other'></input>
<input class='allButtons' type=button id='network' value='All Network Services'></input>
</span>
<span id='MediaAppCategory'>
<input class='allButtons' type=button id='MediaAppVideo' value='Video'></input>
<input class='allButtons' type=button id='MediaAppMusic' value='Music'></input>
<input class='allButtons' type=button id='MediaAppBooks' value='Books / Comics'></input>
<input class='allButtons' type=button id='MediaAppPhotos' value='Photos'></input>
<input class='allButtons' type=button id='MediaAppOther' value='Other'></input>
<input class='allButtons' type=button id='MediaApp' value='All Media Applications'></input>
</span>
<span id='MediaServerCategory'>
<input class='allButtons' type=button id='MediaServerVideo' value='Video'></input>
<input class='allButtons' type=button id='MediaServerMusic' value='Music'></input>
<input class='allButtons' type=button id='MediaServerBooks' value='Books / Comics'></input>
<input class='allButtons' type=button id='MediaServerPhotos' value='Photos'></input>
<input class='allButtons' type=button id='MediaServerOther' value='Other'></input>
<input class='allButtons' type=button id='MediaServer' value='All Media Server'></input>
</span>
<span id='ToolsCategory'>
<input class='allButtons' type=button id='toolssystem' value='System Tools'></input>
<input class='allButtons' type=button id='tools' value='All Tools/Utilities'></input>
</span>
</div>
</span>
<span id='sortorder' data-sortorder='' data-selected=''></span>
</body>
</FORM><span id='debugging'></span>
<form id='appWarningForm' style='display:none;'>
<br><br><center><img src='https://raw.githubusercontent.com/Squidly271/community.applications/master/webImages/Warning2.png' height='50px' width='50px'><br>
<font size='4' color='red'>All Applications listed here are 3rd party additions to unRaid.<br>Neither the authors of Community Applications nor Limetech make any warranty as to the suitability of any applications listed herein.
<br><em>Every attempt is made to ensure that only safe and compatible applications are present</em>
<br><br>You must accept the disclaimer before you can utilize this plugin</font>
<br><br><font size=0><br>Note: if your flash drive is corrupted you may also see this message and it will need to be fixed first
</form>